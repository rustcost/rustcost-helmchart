{{- if and .Values.postgresql.enabled .Values.postgresql.runMigrations }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "rustcost.fullname" . }}-migrations
  labels:
    {{- include "rustcost.labels" . | nindent 4 }}
annotations:
  "helm.sh/hook": post-install,post-upgrade
  "helm.sh/hook-delete-policy": before-hook-creation
spec:
  backoffLimit: 3
  template:
    metadata:
      labels:
        {{- include "rustcost.labels" . | nindent 8 }}
        app: {{ include "rustcost.name" . }}-migrations
    spec:
      restartPolicy: OnFailure
      initContainers:
        - name: wait-for-postgres
          image: alpine:3.19
          command:
            - sh
            - -c
            - |
              apk add --no-cache postgresql-client
              until psql "$DATABASE_URL" -c "SELECT 1;" >/dev/null 2>&1; do
                echo "waiting for postgres..."
                sleep 1
              done
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "rustcost.fullname" . }}-postgresql
                  key: DATABASE_URL
      containers:
        - name: migrate
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["rustcost"]
          args: ["migrate"]
          env:
            - name: DATABASE_URL
              value: "postgres://{{ .Values.postgresql.username }}:{{ .Values.postgresql.password }}@{{ include "rustcost.fullname" . }}-postgresql:5432/{{ .Values.postgresql.database }}"
{{- end }}
